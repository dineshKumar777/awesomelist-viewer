{"version":3,"sources":["userRequest.js","components/ReadmePreview.js","components/SliderGitReadme.js","components/GitReadme4.js","App.js","reportWebVitals.js","index.js"],"names":["fetcher","url","a","fetch","res","ok","text","toLowerCase","lowerres","useRequest","path","Error","useSWR","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","onErrorRetry","shouldRetryOnError","data","error","ReadmePreview","React","memo","gitreponame","console","log","source","transformImageUri","uri","startsWith","SliderGitReadme","GitReadme4","reponame","useState","isPaneOpen","isPaneOpenLeft","state2","setState2","hlink","setHlink","htext","setHtext","useEffect","document","querySelectorAll","forEach","httplink","href","addEventListener","e","preventDefault","currentTarget","handleClick2","setAttribute","className","overlayClassName","isOpen","title","subtitle","onRequestClose","replace","App","setReponame","isshow","setIsshow","state","setState","handleClick","textContent","onClick","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.33c7b3ee.chunk.js","sourcesContent":["import useSWR from \"swr\";\n\nconst baseUrl = \"https://raw.githubusercontent.com/\";\n\nconst fetcher = async url => {\n\tconst res = await fetch(url)\n\tif (res.ok) {\n\t\treturn res.text();\n\t}\n\n\t//Github contains both README.md and readme.md\n\t//for lowercase function\n\tconst lowerres = await fetch(url.toLowerCase());\n\tif (lowerres.ok) {\n\t\treturn lowerres.text()\n\t}\n\n\treturn lowerres.text();\n\n\t/* if (!res.ok) {\n\t\tconst error = new Error('An error occured while fetching the data.');\n\t\t// error.info = await res.json() //causing error\n\t\terror.status = res.status\n\t\tthrow error;\n\t} */\n\t// return res.text()\n}\n\n\nexport const useRequest = (path) => {\n\tif (!path) {\n\t\tthrow new Error(`Path is required`);\n\t}\n\n\tconst url = baseUrl + path + \"/master/README.md\";\n\turl.toLowerCase()\n\tconst { data, error } = useSWR(url, fetcher, {\n\t\trevalidateIfStale: false,\n\t\trevalidateOnFocus: false,\n\t\trevalidateOnReconnect: false,\n\t\tonErrorRetry: false,\n\t\tshouldRetryOnError: false\n\t})\n\n\treturn { data, error };\n};\n","import MarkdownPreview from '@uiw/react-markdown-preview'\nimport React from 'react'\n\n//TODO\n/***\n\t\tfix ./ in transformimageURI returned result\n\t\tadd target=_blank (to open in new window) for non github links\n\t\t\t- and same to all links in slider preview links\nhttps://github.com/jguyon/nupum/blob/ba208f8ef4422a650ff3543fd36104afde7acf50/src/app/package-page/package-page-readme.js\n**/\n\nexport const ReadmePreview = React.memo(function ReadmePreivew({ data, gitreponame }) {\n\tconsole.log('rendering readmepreviewer');\n\n\treturn (\n\t\t<div>\n\t\t\t<MarkdownPreview\n\t\t\t\tsource={data}\n\t\t\t\ttransformImageUri={uri =>\n\t\t\t\t\turi.startsWith(\"http\") ? uri : `https://raw.githubusercontent.com/${gitreponame}/main/${uri}`\n\t\t\t\t}\n\t\t\t/>\n\t\t</div>\n\t)\n});\n","import { useRequest } from \"../userRequest\"\nimport { ReadmePreview } from \"./ReadmePreview\";\n\nexport const SliderGitReadme = ({ gitreponame }) => {\n\tconsole.log('rendering sliderGitreadme')\n\n\tconst { data, error } = useRequest(gitreponame);\n\n\tif (error) return \"An error has occured\";\n\n\tif (!data) {\n\t\tconsole.log('fetching data')\n\t\treturn 'Loading..'\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<ReadmePreview data={data} gitreponame={gitreponame} />\n\t\t</div>\n\t)\n}\n","import React, { useState, useEffect } from 'react';\nimport { useRequest } from \"../userRequest\"\nimport SlidingPane from \"react-sliding-pane\";\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\nimport { ReadmePreview } from \"./ReadmePreview\"\nimport { SliderGitReadme } from \"./SliderGitReadme\";\n\nexport const GitReadme4 = React.memo(function GitReadme4({ reponame }) {\n\tconst gitreponame = reponame;\n\tconsole.log(`git repo name => ${gitreponame}`);\n\tconst [state2, setState2] = useState({\n\t\tisPaneOpen: false,\n\t\tisPaneOpenLeft: false,\n\t});\n\tconst [hlink, setHlink] = useState(\"nolink\");\n\tconst [htext, setHtext] = useState(\"nohtext\");\n\n\tconst handleClick2 = (e) => {\n\t\te.preventDefault();\n\t\tconsole.log(`href value : ${e.currentTarget.href}`)\n\t\tconsole.log(`value : ${e.currentTarget.text}`)\n\t\tsetHlink(e.currentTarget.href);\n\t\tsetHtext(e.currentTarget.text);\n\t\tsetState2({ isPaneOpen: true });\n\t}\n\n\tconst { data, error } = useRequest(gitreponame);\n\tuseEffect(() => {\n\t\tif (data) {\n\t\t\tdocument\n\t\t\t\t.querySelectorAll('[href*=\"https\"]')\n\t\t\t\t.forEach((httplink) => {\n\t\t\t\t\tif (httplink.href.startsWith(\"https://github.com\")) {\n\t\t\t\t\t\tconsole.log('Adding click listerner to github links');\n\t\t\t\t\t\thttplink.addEventListener(\"click\", (e) => handleClick2(e))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log(\"adding target=_blank for non github links\");\n\t\t\t\t\t\thttplink.setAttribute(\"target\", \"_blank\");\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tconsole.log(\"inside second useeffect\")\n\t\t}\n\t}, [data]);\n\n\tif (error) return \"An error has occured..\";\n\n\tif (!data) {\n\t\tconsole.log(\"first try\");\n\t\treturn \"Loading...\";\n\t}\n\n\t//TODO\n\t//transformUri contains ./\n\t// {isShow && <SlidePreviewer isOpenPane={true} hlink={hlink} htext={htext} />}\n\treturn (\n\t\t<div>\n\t\t\t<ReadmePreview data={data} gitreponame={gitreponame} />\n\t\t\t<SlidingPane\n\t\t\t\tclassName=\"slide-pane\"\n\t\t\t\toverlayClassName=\"slide-pane__overlay\"\n\t\t\t\tisOpen={state2.isPaneOpen}\n\t\t\t\ttitle={htext}\n\t\t\t\tsubtitle={hlink}\n\t\t\t\tonRequestClose={() => {\n\t\t\t\t\tsetState2({ isPaneOpen: false });\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div>And I am pane content. BTW, what rocks?</div>\n\t\t\t\t<br />\n\t\t\t\t<SliderGitReadme gitreponame={hlink.replace('https://github.com/', '')} />\n\t\t\t</SlidingPane>\n\t\t</div>\n\t);\n});\n","import './App.css';\nimport React, { useState } from \"react\";\nimport { GitReadme4 } from \"./components/GitReadme4.js\"\nimport SlidingPane from \"react-sliding-pane\";\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\n\n//https://www.debugbear.com/blog/react-rerenders\n\nexport default function App() {\n\n\tconsole.log(\"rendering app.js\")\n\tconst [reponame, setReponame] = useState(\"\");\n\tconst [isshow, setIsshow] = useState(false);\n\tconst [state, setState] = useState({\n\t\tisPaneOpen: false,\n\t\tisPaneOpenLeft: false\n\t})\n\n\tconst handleClick = (e) => {\n\t\tsetIsshow(true);\n\t\tsetReponame(e.currentTarget.textContent)\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<button onClick={() => setState({ isPaneOpen: true })}>slidingpane demo</button>\n\t\t\t<br />\n\n\t\t\t<button onClick={(e) => handleClick(e)}>remarkjs/awesome-remark</button>\n\t\t\t<button onClick={(e) => handleClick(e)}>rockerBOO/awesome-neovim</button>\n\t\t\t<button onClick={(e) => handleClick(e)}>neovide/neovide</button>\n\n\t\t\t<p>Non-github links will be opened in new window</p>\n\t\t\t<br />\n\n\t\t\t{isshow && <GitReadme4 reponame={reponame} />}\n\n\n\t\t\t<SlidingPane\n\t\t\t\tclassName=\"slide-pane\"\n\t\t\t\toverlayClassName=\"slide-pane__overlay\"\n\t\t\t\tisOpen={state.isPaneOpen}\n\t\t\t\ttitle=\"Hey, it is optional pane title.  I can be component too.\"\n\t\t\t\tsubtitle=\"Optional subtitle.\"\n\t\t\t\tonRequestClose={() => {\n\t\t\t\t\tsetState({ isPaneOpen: false });\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div>And I am pane content. BTW, what rocks?</div>\n\t\t\t\t<br />\n\t\t\t\t<img src=\"https://raw.githubusercontent.com/neovide/neovide/main/assets/BasicScreenCap.png\" alt=\"Basic screen cap\" />\n\t\t\t</SlidingPane>\n\t\t</div>\n\t);\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n\t\t\t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}