{"version":3,"sources":["userRequest.js","components/ReadmePreview.js","components/SliderGitReadme.js","components/GitReadme4.js","App.js","reportWebVitals.js","index.js"],"names":["baseAPIUrl","fetcher","url","a","fetch","res","startsWith","console","log","ok","json","text","toLowerCase","lowerres","useRequest","path","Error","apiUrl","repo","useSWR","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","onErrorRetry","shouldRetryOnError","data","default_branch","error","ReadmePreview","React","memo","gitreponame","defaultBranchname","source","transformImageUri","uri","SliderGitReadme","color","size","GitReadme4","reponame","useState","isPaneOpen","isPaneOpenLeft","state2","setState2","hlink","setHlink","htext","setHtext","useEffect","document","querySelectorAll","forEach","httplink","href","addEventListener","e","preventDefault","currentTarget","body","style","overflow","handleClick2","setAttribute","className","overlayClassName","isOpen","title","subtitle","onRequestClose","replace","App","setReponame","isshow","setIsshow","state","setState","handleClick","textContent","onClick","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e7798da5.chunk.js","sourcesContent":["import useSWR from \"swr\";\r\n\r\nconst baseUrl = \"https://raw.githubusercontent.com/\";\r\nconst baseAPIUrl = \"https://api.github.com/repos/\";\r\n\r\nconst fetcher = async url => {\r\n\tconst res = await fetch(url)\r\n\tif (url.startsWith(baseAPIUrl)) {\r\n\t\tconsole.log(\"inside baseapi url\")\r\n\t\tif (res.ok) {\r\n\t\t\tconsole.log(\"baseapi url ok status\")\r\n\t\t\treturn await res.json();\r\n\t\t}\r\n\t}\r\n\r\n\tif (res.ok) {\r\n\t\tconsole.log(\"readme fetchine done\")\r\n\t\treturn await res.text();\r\n\t}\r\n\r\n\t//Github contains both README.md and readme.md\r\n\t//for lowercase function\r\n\tconst lowerres = await fetch(url.toLowerCase());\r\n\tif (lowerres.ok) {\r\n\t\treturn await lowerres.text()\r\n\t}\r\n\r\n\treturn await lowerres.text();\r\n\r\n\t/* if (!res.ok) {\r\n\t\tconst error = new Error('An error occured while fetching the data.');\r\n\t\t// error.info = await res.json() //causing error\r\n\t\terror.status = res.status\r\n\t\tthrow error;\r\n\t} */\r\n\t// return res.text()\r\n}\r\n\r\n\r\nexport const useRequest = (path) => {\r\n\tif (!path) {\r\n\t\tthrow new Error(`Path is required`);\r\n\t}\r\n\r\n\tconst apiUrl = baseAPIUrl + path;\r\n\tconsole.log(\"inside userequest\")\r\n\tconsole.log(\"defaultbranch url:\" + apiUrl);\r\n\tconst { data: repo } = useSWR(apiUrl, fetcher, {\r\n\t\trevalidateIfStale: false,\r\n\t\trevalidateOnFocus: false,\r\n\t\trevalidateOnReconnect: false,\r\n\t\tonErrorRetry: false,\r\n\t\tshouldRetryOnError: false\r\n\t})\r\n\r\n\tconst { data, error } = useSWR(() => baseUrl + path + `/${repo.default_branch}/README.md`, fetcher, {\r\n\t\trevalidateIfStale: false,\r\n\t\trevalidateOnFocus: false,\r\n\t\trevalidateOnReconnect: false,\r\n\t\tonErrorRetry: false,\r\n\t\tshouldRetryOnError: false\r\n\t})\r\n\treturn { data, error, repo }\r\n};\r\n","import MarkdownPreview from '@uiw/react-markdown-preview'\r\nimport React from 'react'\r\n\r\n//TODO\r\n/***\r\n\t\tfix ./ in transformimageURI returned result\r\n\t\tadd target=_blank (to open in new window) for non github links\r\n\t\t\t- and same to all links in slider preview links\r\nhttps://github.com/jguyon/nupum/blob/ba208f8ef4422a650ff3543fd36104afde7acf50/src/app/package-page/package-page-readme.js\r\n**/\r\n\r\n\r\nexport const ReadmePreview = React.memo(function ReadmePreivew({ data, gitreponame, defaultBranchname }) {\r\n\tconsole.log('rendering readmepreviewer');\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<MarkdownPreview\r\n\t\t\t\tsource={data}\r\n\t\t\t\ttransformImageUri={uri =>\r\n\t\t\t\t\turi.startsWith(\"http\") ? uri : `https://raw.githubusercontent.com/${gitreponame}/${defaultBranchname}/${uri}`\r\n\t\t\t\t}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n});\r\n","import { useRequest } from \"../userRequest\"\r\nimport { ReadmePreview } from \"./ReadmePreview\";\r\nimport {FulfillingBouncingCircleSpinner}  from \"react-epic-spinners\"\r\n\r\nexport const SliderGitReadme = ({ gitreponame }) => {\r\n\tconsole.log('rendering sliderGitreadme')\r\n\r\n\tconst { data, error, repo } = useRequest(gitreponame);\r\n\r\n\tif (error) return \"An error has occured\";\r\n\r\n\tif (!data) {\r\n\t\tconsole.log('fetching data')\r\n\t\treturn <FulfillingBouncingCircleSpinner\tcolor='#000000'\tsize='50'/> ;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ReadmePreview data={data} gitreponame={gitreponame} defaultBranchname={repo.default_branch} />\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useRequest } from \"../userRequest\"\r\nimport SlidingPane from \"react-sliding-pane\";\r\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\r\nimport { ReadmePreview } from \"./ReadmePreview\"\r\nimport { SliderGitReadme } from \"./SliderGitReadme\";\r\nimport {FulfillingBouncingCircleSpinner}  from \"react-epic-spinners\"\r\n\r\nexport const GitReadme4 = React.memo(function GitReadme4({ reponame }) {\r\n\tconst gitreponame = reponame;\r\n\r\n\tconsole.log('rendering gitreadme4')\r\n\tconsole.log(`git repo name => ${gitreponame}`);\r\n\r\n\tconst [state2, setState2] = useState({\r\n\t\tisPaneOpen: false,\r\n\t\tisPaneOpenLeft: false,\r\n\t});\r\n\tconst [hlink, setHlink] = useState(\"nolink\");\r\n\tconst [htext, setHtext] = useState(\"nohtext\");\r\n\r\n\tconst handleClick2 = (e) => {\r\n\t\te.preventDefault();\r\n\t\tconsole.log(`href value : ${e.currentTarget.href}`)\r\n\t\tconsole.log(`value : ${e.currentTarget.text}`)\r\n\t\tsetHlink(e.currentTarget.href);\r\n\t\tsetHtext(e.currentTarget.text);\r\n\t\tsetState2({ isPaneOpen: true });\r\n\t\tdocument.body.style.overflow = \"hidden\"\r\n\t}\r\n\r\n\tconst { data, error, repo } = useRequest(gitreponame);\r\n\tuseEffect(() => {\r\n\t\tif (data) {\r\n\t\t\tdocument\r\n\t\t\t\t.querySelectorAll('[href*=\"https\"]')\r\n\t\t\t\t.forEach((httplink) => {\r\n\t\t\t\t\tif (httplink.href.startsWith(\"https://github.com\")) {\r\n\t\t\t\t\t\tconsole.log('Adding click listerner to github links');\r\n\t\t\t\t\t\thttplink.addEventListener(\"click\", (e) => handleClick2(e))\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.log(\"adding target=_blank for non github links\");\r\n\t\t\t\t\t\thttplink.setAttribute(\"target\", \"_blank\");\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\tconsole.log(\"inside second useeffect\")\r\n\t\t}\r\n\t}, [data, repo]);\r\n\r\n\tif (error) return \"An error has occured..\";\r\n\r\n\tif (!data) {\r\n\t\tconsole.log(\"first try\");\r\n\t\treturn <FulfillingBouncingCircleSpinner\tcolor='#000000'\tsize='100'/> ;\r\n\t}\r\n\r\n\t//TODO\r\n\t//transformUri contains ./\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<ReadmePreview data={data} gitreponame={gitreponame} defaultBranchname={repo.default_branch} />\r\n\t\t\t<SlidingPane\r\n\t\t\t\tclassName=\"slide-pane\"\r\n\t\t\t\toverlayClassName=\"slide-pane__overlay\"\r\n\t\t\t\tisOpen={state2.isPaneOpen}\r\n\t\t\t\ttitle={htext}\r\n\t\t\t\tsubtitle={hlink}\r\n\t\t\t\tonRequestClose={() => {\r\n\t\t\t\t\tsetState2({ isPaneOpen: false });\r\n\t\t\t\t\tdocument.body.style.overflow = \"visible\"\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<SliderGitReadme gitreponame={hlink.replace('https://github.com/', '')} />\r\n\t\t\t</SlidingPane>\r\n\t\t</div>\r\n\t);\r\n});\r\n","import './App.css';\r\nimport React, { useState } from \"react\";\r\nimport { GitReadme4 } from \"./components/GitReadme4.js\"\r\nimport SlidingPane from \"react-sliding-pane\";\r\nimport \"react-sliding-pane/dist/react-sliding-pane.css\";\r\n\r\n//https://www.debugbear.com/blog/react-rerenders\r\n\r\nexport default function App() {\r\n\r\n\tconsole.log(\"rendering app.js\")\r\n\tconst [reponame, setReponame] = useState(\"\");\r\n\tconst [isshow, setIsshow] = useState(false);\r\n\tconst [state, setState] = useState({\r\n\t\tisPaneOpen: false,\r\n\t\tisPaneOpenLeft: false\r\n\t})\r\n\r\n\tconst handleClick = (e) => {\r\n\t\tsetIsshow(true);\r\n\t\tsetReponame(e.currentTarget.textContent)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<button onClick={() => setState({ isPaneOpen: true })}>slidingpane demo</button>\r\n\t\t\t<br />\r\n\r\n\t\t\t<button onClick={(e) => handleClick(e)}>brillout/awesome-react-components</button>\r\n\t\t\t<button onClick={(e) => handleClick(e)}>remarkjs/awesome-remark</button>\r\n\t\t\t<button onClick={(e) => handleClick(e)}>rockerBOO/awesome-neovim</button>\r\n\r\n\t\t\t<p>Non-github links will be opened in new window</p>\r\n\t\t\t<br />\r\n\r\n\t\t\t{isshow && <GitReadme4 reponame={reponame} />}\r\n\r\n\r\n\t\t\t<SlidingPane\r\n\t\t\t\tclassName=\"slide-pane\"\r\n\t\t\t\toverlayClassName=\"slide-pane__overlay\"\r\n\t\t\t\tisOpen={state.isPaneOpen}\r\n\t\t\t\ttitle=\"Hey, it is optional pane title.  I can be component too.\"\r\n\t\t\t\tsubtitle=\"Optional subtitle.\"\r\n\t\t\t\tonRequestClose={() => {\r\n\t\t\t\t\tsetState({ isPaneOpen: false });\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<div>And I am pane content. BTW, what rocks?</div>\r\n\t\t\t\t<br />\r\n\t\t\t\t<img src=\"https://raw.githubusercontent.com/neovide/neovide/main/assets/BasicScreenCap.png\" alt=\"Basic screen cap\" />\r\n\t\t\t</SlidingPane>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n\t\t\t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}